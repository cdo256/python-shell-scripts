#!/usr/bin/env python3
import os
import subprocess
import argparse
import sys
import re

def lineCount(file):
	with open(file) as f:
		return f.read().count('\n')

parser = argparse.ArgumentParser(description='Jump to lines selected from stdin')
parser.add_argument('input')
args = parser.parse_args()

entries = []
tail = False # copy indented lines after entry
with open(args.input) as inputFile:
	for entry in inputFile.readlines():
		# Doesn't work if file contains colon or a whitespace character
		entryData = re.match('^([^:\s]+):([0-9]+):([0-9]+:)?\s.*$', entry)
		if entryData is not None:
			print(str(len(entries)), entry, sep=':\t', end='')
			entries.append([[entry], entryData.group(1), entryData.group(2), []])
			tail = True
		elif re.match('^[^\s]', entry) is None and tail:
			print('\t'+entry, end='')
			if len(entries) > 0:
				entries[-1][0] += [entry]
		else:
			print('\t'+entry, end='')
			tail = False

if len(entries) == 0:
	sys.exit(0)

try:
	userInputs = input('> ')
	origLines = dict()
	for userInput in userInputs.split(' '):
		splitInput = userInput.split('-', maxsplit=2)
		if splitInput == ['all'] or splitInput == ['']:
			start = 0
			end = len(entries) - 1
		elif len(splitInput) == 1:
			start = int(splitInput[0])
			end = start
		else:
			start = int(splitInput[0])
			end = int(splitInput[1])
		for i in range(start, end+1):
			for line in entries[i][0]:
				print(line, end='')
			filename = entries[i][1]
			line = int(entries[i][2])
			if filename in origLines:
				# Account for changes made on prior lines, assume all changes were made above our current location.
				line += lineCount(filename) - origLines[filename]
			else:
				origLines[filename] = lineCount(filename)
			p = subprocess.Popen(['edit', '-s', '-l', str(line), filename])
			p.wait()
except KeyboardInterrupt:
	# Ensure we flush before we exit otherwise the shell may print the prompt first
	print(flush=True)
