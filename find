#!/usr/bin/env python3
import os
import subprocess
import argparse
import sys
import re

def lineCount(file):
	with open(file) as f:
		return f.read().count('\n')

parser = argparse.ArgumentParser(description='Find file/line recursively jump to it, wraps grep')
parser.add_argument('query')
parser.add_argument('location', nargs='?')
args = parser.parse_args()

# -H - filenames, -n - line numbers, -r - recursive, -I - ignore binary
command = ['grep', '-HnrI', args.query]
if args.location is not None:
	command.extend([args.location])

process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

rawData = process.communicate()

entries = []
for rawEntry in rawData[0].splitlines():
	entry = rawEntry.decode()
	entryData = entry.split(':', maxsplit=2)
	print(str(len(entries)), entry, sep=':\t')
	entries.append(entryData)
if len(entries) == 0:
	print("No matches")
	sys.exit(0)

try:
	userInputs = input('> ')
	origLines = dict()
	for userInput in userInputs.split(' '):
		splitInput = userInput.split('-', maxsplit=2)
		if splitInput == ['all'] or splitInput == ['']:
			start = 0
			end = len(entries)
		elif len(splitInput) == 1:
			start = int(splitInput[0])
			end = start
		else:
			start = int(splitInput[0])
			end = int(splitInput[1])
		for i in range(start, end+1):
			filename = entries[i][0]
			line = int(entries[i][1])
			if filename in origLines:
				# Account for changes made on prior lines, assume all changes were made above our current location.
				line += lineCount(filename) - origLines[filename]
			else:
				origLines[filename] = lineCount(filename)
			p = subprocess.Popen(['edit', '-s', '-l', str(line), filename])
			p.wait()
except KeyboardInterrupt:
	# Ensure we flush before we exit otherwise the shell may print the prompt first
	print(flush=True)
